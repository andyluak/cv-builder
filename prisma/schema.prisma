// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  firstName String?
  lastName  String?

  accounts            Account[]
  sessions            Session[]
  profileDescriptions ProfileDescription[]
  coverLetters        CoverLetter[]
  resumes             Resume[]

  educations Education[]
  jobs       Job[]
  links      Link[]
  skills     Skill[]

  role String @default("USER")
}

model Resume {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  profileDescriptions ProfileDescription[]
  educations          Education[]
  jobs                Job[]
  links               Link[]
  skills              Skill[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Education {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  resumeId String?
  resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  school       String
  degree       String
  fieldOfStudy String
  location     String
  from         String
  to           String
  current      Boolean @default(false)
}

model Job {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  resumeId String?
  resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  company     String
  position    String
  location    String
  from        String
  to          String
  current     Boolean    @default(false)
  description String
  jobPoints   JobPoint[]
}

model JobPoint {
  id    String @id @default(cuid())
  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  point String
}

model CoverLetter {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  title  String
  letter String
}

model Link {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  resumeId String?
  resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  label String
  link  String
}

model ProfileDescription {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  resumeId String?
  resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  text String
}

model Skill {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  resumeId String?
  resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  label String
  level Int?
}
